# package
snippet pack
	package ${1} {
		${2}
	}
# class ...
snippet class
	/**
	* ${1}
	**/
	public class ${2:ClassName} {
		public function ${3:$2}(${4}) {
			${5:// code...}
		}
	}
# Function
snippet fun
	${1:public }function ${2:FunctionName}(${3}):${4:void} {
		${5:// code...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	(${1:condition}) ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
	break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:condition}) {
		${2:code}
	}
# do...while
snippet do
	do {
		${2:code}
	} while (${1:condition})
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# get
snippet get
	public function get ${1}():${2:type} {
		return ${3};
	}
# set
snippet set
	public function set ${1}(value:${2://type}):void {
		this.${3} = value;
	}
# var
snippet var
	${1:public} var ${2}:${3};
